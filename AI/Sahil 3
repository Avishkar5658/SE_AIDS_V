# Graph representation
graph = {
    '5': ['3', '7'],
    '3': ['2', '4'],
    '7': ['8'],
    '2': [],
    '4': ['8'],
    '8': []
}

# BFS Implementation
visited_bfs = []  # List for visited nodes.
queue = []        # Initialize a queue

def bfs(visited, graph, node):
    visited.append(node)
    queue.append(node)
    
    while queue:
        m = queue.pop(0)
        print(m, end=" ")

        for neighbour in graph[m]:
            if neighbour not in visited:
                visited.append(neighbour)
                queue.append(neighbour)

# Driver code for BFS
print("Following is the Breadth-First Search:")
bfs(visited_bfs, graph, '5')  # Start BFS from node '5'

print("\n")  # New line for separation

# DFS Implementation
visited_dfs = set()  # Set to keep track of visited nodes of graph.

def dfs(visited, graph, node):
    if node not in visited:
        print(node, end=" ")
        visited.add(node)
        
        for neighbour in graph[node]:
            dfs(visited, graph, neighbour)

# Driver code for DFS
print("Following is the Depth-First Search:")
dfs(visited_dfs, graph, '5')  # Start DFS from node '5'
